{
  "name": "Microservice Art Generator",
  "nodes": [
    {
      "parameters": {
        "path": "anime-art-test",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -180,
        0
      ],
      "id": "7dd13df9-6d1f-450d-8007-7a49e1aa17c3",
      "name": "Webhook",
      "webhookId": "d6351b45-9d2c-4e5b-b7b9-d3f524f07992"
    },
    {
      "parameters": {
        "model": "sonar",
        "messages": {
          "message": [
            {
              "content": "You are an expert in visual design and stylized illustration. Your task is to analyze a given visual art style and describe it in a way that guides an AI image generation model toward creating bold, expressive character-focused artwork.\n\nGiven the name of an illustration style, return a vivid, descriptive breakdown that captures the essence of that style. Focus on how it informs the mood, structure, and visual treatment of a character scene. Your goal is to provide enough detail to influence image generation, while never referencing copyrighted characters, franchises, or media titles.\n\nYour output must include:\nColor Palette: Typical colors used in this style\nLinework & Detail: Description of the drawing style (e.g., bold, soft, sketchy, clean, painterly, graphic)\nCommon Subjects: Typical themes, characters, or scenes illustrated in this style\nMood & Atmosphere: Emotional tone the images usually convey\nInfluences: Relevant time periods, cultural movements, or aesthetic inspirations\n\nRespond only with the structured list. Please do not include any citation references in the structured list.",
              "role": "system"
            },
            {
              "content": "=My chosen art style is: {{ $json.backendStyle }}"
            }
          ]
        },
        "options": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.perplexity",
      "typeVersion": 1,
      "position": [
        220,
        -80
      ],
      "id": "7a678eda-e18e-48e4-97df-9dd0c94ecf43",
      "name": "Perplexity",
      "credentials": {
        "perplexityApi": {
          "id": "dejH4yTQc25g2aGs",
          "name": "Perplexity account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "You are a creative assistant helping to prepare character prompts for a stylized image generation AI.\n\nYour task is to take a simple character description provided by a user and transform it into an enhanced version of the character description that is more vivid, expressive, and specific â€” without changing the original characterâ€™s intent.\n\nFocus on enhancing visual traits (pose, outfit, expression, accessories), emotional presence, and scene setting (if implied or requested).\n\nIn addition, incorporate the aspects of the mood evoked by the selected style, subtly influencing the character's expression, posture and surroundings.\n\nDo not mention any copyrighted characters, names, or franchises. Focus only on descriptive language that would help guide an image generation model.\n\nProvide only the enhanced character prompt as the output.",
              "role": "system"
            },
            {
              "content": "=This is my simple character description: {{ $('Webhook').item.json.query.characterDescription }}\n\nThis is my selected style: {{ $json.frontendStyle }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        220,
        100
      ],
      "id": "fda18f09-db06-4b82-8452-59492c672ef4",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "urFzJOukgngMNRHj",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const raw = $input.first().json.choices[0].message.content;\n\n// Helper function to extract section content\nfunction extractSection(label, nextLabels = []) {\n  // Escape next labels for regex\n  const nextLabelRegexPart = nextLabels.map(l => l.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')).join('|');\n  const regexString = `${label}:\\\\s*(.*?)(?=\\\\n\\\\n(?:${nextLabelRegexPart}):|\\\\n(?:${nextLabelRegexPart}):|$)`;\n  const regex = new RegExp(regexString, 'is'); // case-insensitive + dot matches newline\n  const match = raw.match(regex);\n  return match ? match[1].trim() : null;\n}\n\n// List of all section titles\nconst allLabels = [\n  \"Color Palette\",\n  \"Linework & Detail\",\n  \"Common Subjects\",\n  \"Mood & Atmosphere\",\n  \"Influences\"\n];\n\n// Extract each section\nconst colorPalette = extractSection(\"Color Palette\", allLabels.filter(l => l !== \"Color Palette\"));\nconst lineworkDetail = extractSection(\"Linework & Detail\", allLabels.filter(l => l !== \"Linework & Detail\"));\nconst commonSubjects = extractSection(\"Common Subjects\", allLabels.filter(l => l !== \"Common Subjects\"));\nconst moodAtmosphere = extractSection(\"Mood & Atmosphere\", allLabels.filter(l => l !== \"Mood & Atmosphere\"));\nconst influences = extractSection(\"Influences\", allLabels.filter(l => l !== \"Influences\"));\n\n// Return in n8n format\nreturn [\n  {\n    json: {\n      colorPalette,\n      lineworkDetail,\n      commonSubjects,\n      moodAtmosphere,\n      influences\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        -80
      ],
      "id": "b247f029-b1a1-4eb7-8578-778968908e5c",
      "name": "Code1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1240,
        0
      ],
      "id": "ae9af849-12bb-4d21-ba82-0e181620ad89",
      "name": "Merge"
    },
    {
      "parameters": {
        "resource": "image",
        "prompt": "={{ $json.message.content }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1820,
        0
      ],
      "id": "addc86b6-ee45-4800-a1d9-7cbdcd6fdf07",
      "name": "OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "urFzJOukgngMNRHj",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const content = $input.first().json.message.content;\n\nreturn [\n  {\n    json: {\n      prompt: content // ðŸ‘ˆ flat, easy-to-access key\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        100
      ],
      "id": "e23acdf5-40fc-4a16-8d97-ae70eb9a51c9",
      "name": "Code"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "You are a prompt engineer specializing in generating high-quality image prompts for the DALLÂ·E 3 model. Your goal is to synthesize a visually rich, emotionally resonant, and compositionally balanced image prompt using the inputs provided.\n\nYou will be given:\n\nA vivid and expressive character concept\n\nThe name of a visual art styles (e.g. Cyberpunk, Surrealism, Line Art)\n\nA summary of the common colors used in that style\n\nThe typical drawing style (e.g., bold, sketchy, soft, painterly, clean)\n\nThe types of characters, themes, or scenes commonly depicted\n\nThe emotional tone conveyed by this style\n\nThe real-world or genre influences behind the visual language\n\nYour job is to combine these into a single, fluent, well-written prompt that can be passed directly to DALLÂ·E to generate a high-quality anime-style image, not a realistic painting, comic book panel, or fantasy concept art.\n\nVisual Style Requirements:\n\nThe illustration must follow the conventions of the given visual art style.\n\nDescribe the coloring method (e.g. cel-shaded, painterly, high contrast) and linework clearly.\n\nMention the color palette and how it shapes the tone and visual cohesion.\n\nEnsure that the mood, pose, and environment reflect the style's emotional signature.\n\nAvoid conflicting visual terms (e.g. \"cel-shaded\" + \"photorealistic\").\n\nComposition Requirements:\n\nThe character should be shown in full-body or three-quarters, standing alone. There should be no other characters, shadows, duplicates, or figures in the image.\n\nAll limbs must be clearly visible, correctly proportioned, and well-integrated into the composition.\n\nIf a weapon is included, ensure it is a single, clearly positioned weapon only â€” no duplicates.\n\nThe character should be integrated into a fully illustrated, detailed background scene that supports the emotional tone and thematic setting.\n\nThe image should feel like a production illustration, concept art frame, or editorial keyframe, not a character card or isolated render.\n\nEnsure balance between character and environment â€” this should be a full illustration, not a character render on a blank canvas.\n\nFinal Instruction (must appear at the end of the prompt): Drawn in the selected stylized art form, using its characteristic color palette, linework, and visual storytelling traits. Only one character, no duplicates. Full-body view, cohesive background, expressive mood. No text. No borders. Full scene\n\nOnly return the final image prompt. Do not label it, format it in markdown, or provide explanation.",
              "role": "=system"
            },
            {
              "content": "=Prompt:  {{ $json.prompt }}\nColour Palette: {{ $json.colorPalette }}\nLinework: {{ $json.lineworkDetail }}\nCommon Subjects: {{ $json.commonSubjects }}\nInfluences: {{ $json.influences }}\nMood: {{ $json.moodAtmosphere }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1460,
        0
      ],
      "id": "732cb9e1-7a8d-4904-b8a4-39a15cb3740e",
      "name": "Build Image Prompt",
      "credentials": {
        "openAiApi": {
          "id": "urFzJOukgngMNRHj",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        2460,
        0
      ],
      "id": "4481c165-5b68-400b-9621-fa6745db4b7f",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "destinationKey": "imageBase64",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        2020,
        0
      ],
      "id": "6975306c-25fe-40fa-9f85-885222437891",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      image: `data:image/png;base64,${$json.imageBase64.trim()}`\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        0
      ],
      "id": "dfd7abd4-c39a-43f9-bffd-9a205c0e21bd",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// Map of frontend labels to backend-recognizable styles\nconst styleMap = {\n  \"Cinematic Ink\": \"Line Art\",\n  \"Fantasy Glow\": \"Art Nouveau\",\n  \"Neo-Tokyo\": \"Cyberpunk\",\n  \"Arcane Steel\": \"Grimdark Fantasy\",\n  \"Soft Studio\": \"Cel-Shaded\",\n  \"Digital Brushwork\": \"Digital Painting\",\n  \"Vaporchrome\": \"Pop Art\",\n  \"Shadow Bloom\": \"Baroque\",\n  \"Wasteland Render\": \"Post-Apocalyptic\",\n  \"Hero Forge\": \"Cel-Shaded\",\n  \"Mythos Etched\": \"Neo-Classicism\",\n  \"Street Sketch\": \"Urban Illustration\",\n  \"Plasma Core\": \"Sci-Fi Concept Art\",\n  \"Crimson Lotus\": \"Eastern Fantasy Illustration\",\n  \"Retro Prism\": \"Retro Anime\",\n  \"Dreamfade\": \"Surrealism\"\n};\n\n// Extract user-selected frontend style\nconst userStyle = $input.first().json.query.artStyle;\n\n// Get backend style â€” fallback to userStyle if no mapping exists\nconst backendStyle = styleMap[userStyle] || userStyle;\n\nreturn [\n  {\n    json: {\n      frontendStyle: userStyle,\n      backendStyle: backendStyle\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "0051c80b-5f46-4b00-af43-a9286fe89a3a",
      "name": "Code3"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Perplexity": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Build Image Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Build Image Prompt": {
      "main": [
        [
          {
            "node": "OpenAI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Perplexity",
            "type": "main",
            "index": 0
          },
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ae64007a-294d-46c8-9fca-b5ac5b70c566",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3287dd10ae5dfb6312cecd6adf7770eca98cfa8c9d670e5b5b17caae67f94d86"
  },
  "id": "AGFaVkNF0UcGOD76",
  "tags": []
}